<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KryoLogs</title><link>https://kalebhawkins.github.io/KryoLogs/</link><description>Recent content on KryoLogs</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 12 Jun 2024 14:47:56 -0500</lastBuildDate><atom:link href="https://kalebhawkins.github.io/KryoLogs/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started with AWS CDK</title><link>https://kalebhawkins.github.io/KryoLogs/docs/aws/cdk/getting-started/</link><pubDate>Fri, 31 May 2024 08:41:52 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/aws/cdk/getting-started/</guid><description>What is the CDK linkThe AWS Cloud Development Kit (AWS CDK) is an open-source software development framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation.
The AWS CDK consists of two primary parts:
AWS CDK Construct Library â€“ A collection of pre-written modular and reusable pieces of code, called constructs, that you can use, modify, and integrate to develop your infrastructure quickly. The goal of the AWS CDK Construct Library is to reduce the complexity required to define and integrate AWS services together when building applications on AWS.</description></item><item><title>Building Your First CDK Application</title><link>https://kalebhawkins.github.io/KryoLogs/docs/aws/cdk/aws-cdk-first-app-go/</link><pubDate>Sun, 02 Jun 2024 20:56:51 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/aws/cdk/aws-cdk-first-app-go/</guid><description>Building a CDK Application with Go linkIn this tutorial we will look at how to build a simple app that creates a single S3 bucket using Go.
For more detail reference the AWS Documentation. Their documentation also shows you how to do the same thing in other languages like Python.
Initialize New Application link # You can substitute go for whatever language. cdk init app --language go # Install the required Go modules go get Build the Application linkIn most programming environments, you build or compile code after making changes.</description></item><item><title>Installing AWS Greengrass</title><link>https://kalebhawkins.github.io/KryoLogs/docs/aws/greengrass/</link><pubDate>Wed, 12 Jun 2024 14:47:56 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/aws/greengrass/</guid><description>Greengrass Documentation
Provisioning linkEnsure that the BIOS, NIC, and GPU have the latest firmware installed.
Disable any power saving features in the BIOS including hibernation/sleep. Also depending on the GPU/CPU different combinations of drivers, Cuda, cudnn and tensorrt needs to be installed. Below is an example for a g4dn ec2 instance.
Update Linux Libraries and Install Dependencies link sudo dnf update -y sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm sudo dnf install wget openssl-devel libffi-devel bzip2-devel sqlite-devel python3.</description></item><item><title>AWS CLI SSL Verify Failed</title><link>https://kalebhawkins.github.io/KryoLogs/docs/aws/troubleshooting/aws-cli-ssl-verify-failed/</link><pubDate>Mon, 03 Jun 2024 10:36:26 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/aws/troubleshooting/aws-cli-ssl-verify-failed/</guid><description>Problem linkExecuting a command like aws sts get-caller-identity returns a message similar to the one below.
SSL validation failed for https://sts.us-east-1.amazonaws.com/ [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate in certificate chain (_ssl.c:1006) Root Cause linkYou might be going through a proxy server. To view more information on the cert chain and the error message you can use the openssl s_client to peak into what is going on.
openssl s_client -connect sts.</description></item><item><title>VCSim</title><link>https://kalebhawkins.github.io/KryoLogs/docs/tools/vcsim/</link><pubDate>Thu, 30 May 2024 14:57:09 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/tools/vcsim/</guid><description>Overview linkThis package implements a vSphere Web Services (SOAP) SDK endpoint intended for testing consumers of the API. While the mock framework is written in the Go language, it can be used by any language that can talk to the vSphere API.
See their github for more info.
Usage linkTo run vcsim using docker run the following:
docker run -p 8989:8989 vmware/vcsim:latest To test functionality of the container you can run the following command.</description></item><item><title>PowerCLI</title><link>https://kalebhawkins.github.io/KryoLogs/docs/tools/powercli/</link><pubDate>Thu, 30 May 2024 14:56:44 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/tools/powercli/</guid><description>Overview linkVmware PowerCLI is a Powershell module used interact with vCenter amd vSphere APIs. This allows for simple automation of mundane, redundant tasks, like inventorying servers.
Installation linkTo install PowerCLI open up a powershell window and run the following command.
Install-Module VMware.PowerCLI -Scope CurrentUser -AllowClobber Using PowerCLI linkGetting connected to your cluster can be performed with one command.
Connect-ViServer &amp;lt;vcenter.domain.com&amp;gt; -Credentials $(Get-Credentials) -Force Get a list of your clusters, hosts, and vms.</description></item><item><title>Minikube</title><link>https://kalebhawkins.github.io/KryoLogs/docs/tools/minikube/</link><pubDate>Thu, 30 May 2024 14:56:27 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/tools/minikube/</guid><description>Overview linkMinikube is local Kubernetes, focusing on making it easy to learn and develop for Kubernetes. All you need is Docker (or similarly compatible) container or a Virtual Machine environment, and Kubernetes is a single command away: minikube start.
Installation link curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube Uninstallation link sudo rm /usr/local/bin/minikube Customize Cluster linkGet configurable items using:
minikube config --help To set configuration properties:
minikube config set &amp;lt;property&amp;gt; &amp;lt;value&amp;gt; To get current configuration:</description></item><item><title>VSphere StorageClasses</title><link>https://kalebhawkins.github.io/KryoLogs/docs/linux/openshift/vsphere-storageclasses/</link><pubDate>Thu, 30 May 2024 14:50:23 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/linux/openshift/vsphere-storageclasses/</guid><description>In this post we are going to look at two different things. First, we will look at modifying the default datastore for our vsphere storage class. Second, we will look at creating storage classes that specify the datastore.
The Default Datastore link This change will trigger the nodes to reboot. Always make sure you are in an open maintenance window or that your applications are designed to work through pods migrating from node to node for less impact.</description></item><item><title>Ownership Transfer</title><link>https://kalebhawkins.github.io/KryoLogs/docs/linux/openshift/ownership-transfer/</link><pubDate>Thu, 30 May 2024 14:50:10 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/linux/openshift/ownership-transfer/</guid><description>Overview linkThere are two steps to transfer ownership to a new user or organization.
Initiate the transfer in Openshift Cluster Manager. Change the cluster pull secret to the new owner&amp;rsquo;s pull secret from CLI, The second step must take place within 5 days of the transfer initiation of cluster transfer from the Openshift Cluster Manager.
Transferring Ownership link Login to the Openshift Cluster Manager as the current owner. Select the cluster you want to transfer from the Clusters list.</description></item><item><title>Machinesets</title><link>https://kalebhawkins.github.io/KryoLogs/docs/linux/openshift/machinesets/</link><pubDate>Thu, 30 May 2024 14:49:58 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/linux/openshift/machinesets/</guid><description>In this document we are going to review the process of modifying a machineset to increase resources, for this example we will be increasing memory.
Modify The Machineset linkIn the first step we modify the machine set we want to modify. First we decide which machineset we want to modify we can get the machinesets using the following.
oc get machineset -n openshift-machine-api Now we want to modify our machineset&amp;rsquo;s memory.</description></item><item><title>Authentication Operator Degraded</title><link>https://kalebhawkins.github.io/KryoLogs/docs/linux/openshift/authentication-operator-degraded/</link><pubDate>Thu, 30 May 2024 14:49:49 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/linux/openshift/authentication-operator-degraded/</guid><description>Issue Summary linkWhen performing an oc get co the authentication cluster operator is reporting a degraded state with the following message.
OAuthServerRouteEndpointAccessibleControllerAvailable: Get &amp;#34;https://oauth-openshift.apps.zone.domain.com/healthz&amp;#34;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) Root Cause linkThis can be a result of many different things, network issues, domain name resolution issues, etc. In my case the authentication pods and authentication-operator pod running in the cluster were failing to reconciliate due to some node modifications.</description></item><item><title>Vmware Template</title><link>https://kalebhawkins.github.io/KryoLogs/docs/linux/redhat/vmware-template/</link><pubDate>Thu, 30 May 2024 14:39:33 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/linux/redhat/vmware-template/</guid><description>Prerequisites link Access to Red Hat&amp;rsquo;s access portal to download the Red Hat ISO. An active Red Hat Enterprise Linux subscription. Create the Virtual Machine linkSign into vCenter.
Right-click the cluster you want to create the virtual machine on.
Select New Virtual Machine.
Set the name and select a folder to place the template in.
Select the compute resource to place the template on.
Select the datastore to place the template on.</description></item><item><title>Setting Up HAProxy Clusters</title><link>https://kalebhawkins.github.io/KryoLogs/docs/linux/redhat/haproxycluster/</link><pubDate>Thu, 30 May 2024 14:35:56 -0500</pubDate><guid>https://kalebhawkins.github.io/KryoLogs/docs/linux/redhat/haproxycluster/</guid><description>Install Required Packages linkInstall haproxy and keepalived packages.
dnf install -y keepalived haproxy Configure Keepalived linkConfigure firewall rules for keepalived VRRP protocol.
firewall-cmd --add-rich-rule=&amp;#39;rule protocol value=&amp;#34;vrrp&amp;#34; accept&amp;#39; --permanent firewall-cmd --reload Configure keepalived.
vi /etc/keepalived/keepalived.conf global_defs { notification_email { admin@example.com } notification_email_from noreply@example.com smtp_server 127.0.0.1 smtp_connect_timeout 60 } vrrp_script chk_haproxy { script &amp;#34;killall -0 haproxy&amp;#34; # check the haproxy process interval 2 # every 2 seconds weight 2 # add 2 points if OK } vrrp_instance VI_1 { interface eth0 # interface to monitor state MASTER # MASTER on haproxy, BACKUP on haproxy2 virtual_router_id 51 priority 101 # 101 on haproxy, 100 on haproxy2 authentication { auth_type PASS auth_pass {{ auth_pass }} } virtual_ipaddress { 192.</description></item></channel></rss>