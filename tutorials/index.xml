<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on KryoLogs</title><link>https://KalebHawkins.github.io/KryoLogs/tutorials/</link><description>Recent content in Tutorials on KryoLogs</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://KalebHawkins.github.io/KryoLogs/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Openshift Ownership Transfer</title><link>https://KalebHawkins.github.io/KryoLogs/tutorials/openshift/openshiftownershiptransfer/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>https://KalebHawkins.github.io/KryoLogs/tutorials/openshift/openshiftownershiptransfer/</guid><description>Overview Transfering Ownership Update the Pull Secret Verification Steps Reference Overview There are two steps to transfer ownership to a new user or organization.
Initiate the transfer in Openshift Cluster Manager. Change the cluster pull secret to the new owner's pull secret from CLI, The second step must take place within 5 days of the transfer initiation of cluster transfer from the Openshift Cluster Manager. Transfering Ownership Login to the Openshift Cluster Manager as the current owner.</description></item><item><title>Enable Automatic Updates Ubuntu 20.04</title><link>https://KalebHawkins.github.io/KryoLogs/tutorials/linux/ubuntu/automatic-updates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://KalebHawkins.github.io/KryoLogs/tutorials/linux/ubuntu/automatic-updates/</guid><description>Update and install required packages.
1sudo apt update &amp;amp;&amp;amp; sudo apt upgrade 2sudo apt install unattended-upgrades Turn on unattended updates.
1sudo dpkg-reconfigure -plow unattended-upgrades</description></item><item><title>HAProxy &amp; Keepalived</title><link>https://KalebHawkins.github.io/KryoLogs/tutorials/linux/redhat/haproxycluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://KalebHawkins.github.io/KryoLogs/tutorials/linux/redhat/haproxycluster/</guid><description>Install Required Packages Configure Keepalived Configure HAProxy Install Required Packages Install haproxy and keepalived packages.
1dnf install -y keepalived haproxy Configure Keepalived Configure firewall rules for keepalived VRRP protocol.
1firewall-cmd --add-rich-rule=&amp;#39;rule protocol value=&amp;#34;vrrp&amp;#34; accept&amp;#39; --permanent 2firewall-cmd --reload Configure keepalived.
1vi /etc/keepalived/keepalived.conf 1global_defs { 2 3 notification_email { 4 admin@example.com 5 } 6 notification_email_from noreply@example.com 7 smtp_server 127.0.0.1 8 smtp_connect_timeout 60 9} 10 11vrrp_script chk_haproxy { 12 script &amp;#34;killall -0 haproxy&amp;#34; # check the haproxy process 13 interval 2 # every 2 seconds 14 weight 2 # add 2 points if OK 15} 16 17vrrp_instance VI_1 { 18 interface eth0 # interface to monitor 19 state MASTER # MASTER on haproxy, BACKUP on haproxy2 20 virtual_router_id 51 21 priority 101 # 101 on haproxy, 100 on haproxy2 22 authentication { 23 auth_type PASS 24 auth_pass {{ auth_pass }} 25 } 26 virtual_ipaddress { 27 192.</description></item><item><title>Install Docker CE (Ubuntu 20.04)</title><link>https://KalebHawkins.github.io/KryoLogs/tutorials/linux/ubuntu/install-docker-ce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://KalebHawkins.github.io/KryoLogs/tutorials/linux/ubuntu/install-docker-ce/</guid><description>Installation Steps Addition Steps Installation Steps Remove older versions of Docker if installed.
1sudo apt remove docker docker-engine docker.io containerd runc Install the Docker repository.
1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 2sudo add-apt-repository &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;#34; Install Docker CE.
1sudo apt update -y 2sudo apt install docker-ce docker-ce-cli containerd.io -y Check the service status.
1sudo systemctl status docker Test Installation.
1sudo docker run hello-world Addition Steps Add user to docker group.</description></item><item><title>Minikube</title><link>https://KalebHawkins.github.io/KryoLogs/tutorials/tools/minikube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://KalebHawkins.github.io/KryoLogs/tutorials/tools/minikube/</guid><description>Overview Installation Uninstallation Customize Cluster Minikube Add-Ons Set Minikube $HOME Preferenced Setup Overview Minikube is local Kubernetes, focusing on making it easy to learn and develop for Kubernetes. All you need is Docker (or similarly compatible) container or a Virtual Machine environment, and Kubernetes is a single command away: minikube start.
Installation 1curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 2sudo install minikube-linux-amd64 /usr/local/bin/minikube Uninstallation 1sudo rm /usr/local/bin/minikube Customize Cluster Get configurable items using:</description></item><item><title>Red Hat 8.5 VMWare Template</title><link>https://KalebHawkins.github.io/KryoLogs/tutorials/linux/redhat/vmware-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://KalebHawkins.github.io/KryoLogs/tutorials/linux/redhat/vmware-template/</guid><description>Prerequisites Create the Virtual Machine Prepare for Red Hat Installation Red Hat Installation Template Configuration Prerequisites Access to Red Hat's access portal to download the Red Hat ISO. An active Red Hat Enterprise Linux subscription. Create the Virtual Machine Sign into vCenter.
Right-click the cluster you want to create the virtual machine on.
Select New Virtual Machine.
Set the name and select a folder to place the template in.</description></item><item><title>Setup vcsim</title><link>https://KalebHawkins.github.io/KryoLogs/tutorials/tools/vcsim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://KalebHawkins.github.io/KryoLogs/tutorials/tools/vcsim/</guid><description>Overview Usage Overview This package implements a vSphere Web Services (SOAP) SDK endpoint intended for testing consumers of the API. While the mock framework is written in the Go language, it can be used by any language that can talk to the vSphere API.
See their github for more info.
Usage To run vcsim using docker run the following:
1docker run -p 8989:8989 vmware/vcsim:latest To test functionality of the container you can run the following command.</description></item><item><title>Vmware PowerCLI</title><link>https://KalebHawkins.github.io/KryoLogs/tutorials/tools/powercli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://KalebHawkins.github.io/KryoLogs/tutorials/tools/powercli/</guid><description>Overview Installation Using PowerCLI Overview Vmware PowerCLI is a Powershell module used interact with vCenter amd vSphere APIs. This allows for simple automation of mundane, redundant tasks, like inventorying servers.
Installation To install PowerCLI open up a powershell window and run the following command.
1Install-Module VMware.PowerCLI -Scope CurrentUser -AllowClobber Using PowerCLI Getting connected to your cluster can be performed with one command.
1Connect-ViServer &amp;lt;vcenter.domain.com&amp;gt; -Credentials $(Get-Credentials) -Force Get a list of your clusters, hosts, and vms.</description></item></channel></rss>