[{"body":"","link":"https://KalebHawkins.github.io/KryoLogs/docs/","section":"docs","title":"Documentation"},{"body":"This section of the site contains a collection of various how-to documents that are easy to follow and concise.\nRed Hat Enterprise Linux Create Red Hat Template (VMware) Create HAProxy Clusters Ubuntu Linux Enable Automatic Updates Install Docker CE Tools vCenter API Simulation (vcsim) minikube Openshift Transfer Ownership of Openshift Cluster ","link":"https://KalebHawkins.github.io/KryoLogs/tutorials/","section":"tutorials","title":"Tutorials"},{"body":" Overview Transfering Ownership Update the Pull Secret Verification Steps Reference Overview There are two steps to transfer ownership to a new user or organization.\nInitiate the transfer in Openshift Cluster Manager. Change the cluster pull secret to the new owner's pull secret from CLI, The second step must take place within 5 days of the transfer initiation of cluster transfer from the Openshift Cluster Manager. Transfering Ownership Login to the Openshift Cluster Manager as the current owner. Select the cluster you want to transfer from the Clusters list. Click Actions -\u0026gt; Transfer Cluster Ownship. Click Initiate transfer to confirm this action. Update the Pull Secret The pull secret must be updated on the cluster you are wanting to transfer ownership of.\nClusters that are versions earlier than 4.7.4 requires reboot to update the pull secret. This can temporarily limit usability of the cluster. Log into the Openshift Cluster Manager as the user taking ownership of the cluster. Download or copy the pull secret from the Downloads page under Tokens. Run the following command using the pull secret you downloaded. 1oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson=pull-secret.txt This begins updates to all nodes in the cluster, which can take some time depending on the size of your cluster.\nVerification Steps Log into the Openshift Cluster Manager as the user taking ownership of the cluster. In Details, the Owner has been updated. In Cluster history, details of the transfer appear. Reference Red Hat Cluster Manager ","link":"https://KalebHawkins.github.io/KryoLogs/tutorials/openshift/openshiftownershiptransfer/","section":"tutorials","title":"Openshift Ownership Transfer"},{"body":"","link":"https://KalebHawkins.github.io/KryoLogs/blog/","section":"blog","title":"Blog"},{"body":"","link":"https://KalebHawkins.github.io/KryoLogs/categories/","section":"categories","title":"Categories"},{"body":"Update and install required packages.\n1sudo apt update \u0026amp;\u0026amp; sudo apt upgrade 2sudo apt install unattended-upgrades Turn on unattended updates.\n1sudo dpkg-reconfigure -plow unattended-upgrades ","link":"https://KalebHawkins.github.io/KryoLogs/tutorials/linux/ubuntu/automatic-updates/","section":"tutorials","title":"Enable Automatic Updates Ubuntu 20.04"},{"body":" Install Required Packages Configure Keepalived Configure HAProxy Install Required Packages Install haproxy and keepalived packages.\n1dnf install -y keepalived haproxy Configure Keepalived Configure firewall rules for keepalived VRRP protocol.\n1firewall-cmd --add-rich-rule=\u0026#39;rule protocol value=\u0026#34;vrrp\u0026#34; accept\u0026#39; --permanent 2firewall-cmd --reload Configure keepalived.\n1vi /etc/keepalived/keepalived.conf 1global_defs { 2 3 notification_email { 4 admin@example.com 5 } 6 notification_email_from noreply@example.com 7 smtp_server 127.0.0.1 8 smtp_connect_timeout 60 9} 10 11vrrp_script chk_haproxy { 12 script \u0026#34;killall -0 haproxy\u0026#34; # check the haproxy process 13 interval 2 # every 2 seconds 14 weight 2 # add 2 points if OK 15} 16 17vrrp_instance VI_1 { 18 interface eth0 # interface to monitor 19 state MASTER # MASTER on haproxy, BACKUP on haproxy2 20 virtual_router_id 51 21 priority 101 # 101 on haproxy, 100 on haproxy2 22 authentication { 23 auth_type PASS 24 auth_pass {{ auth_pass }} 25 } 26 virtual_ipaddress { 27 192.168.0.100 # virtual ip address 28 } 29 track_script { 30 chk_haproxy 31 } 32} 1sysctl -w net.ipv4.ip_forward=1 2systemctl enable --now keepalived Configure HAProxy Configure haproxy for SELinux HTTP.\n1vi /etc/firewalld/services/haproxy-http.xml 1\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; 2\u0026lt;service\u0026gt; 3\u0026lt;short\u0026gt;HAProxy-HTTP\u0026lt;/short\u0026gt; 4\u0026lt;description\u0026gt;HAProxy load-balancer\u0026lt;/description\u0026gt; 5\u0026lt;port protocol=\u0026#34;tcp\u0026#34; port=\u0026#34;80\u0026#34;/\u0026gt; 6\u0026lt;/service\u0026gt; 1restorecon /etc/firewalld/services/haproxy-http.xml 2chmod 640 /etc/firewalld/services/haproxy-http.xml Configure the haproxy configuration file.\n1vi /etc/haproxy/haproxy.cfg 1frontend main *:80 2 mode http 3 default_backend app 4 5backend app 6 balance roundrobin 7 mode http 8 server app1 10.0.0.71:80 check 9 server app2 10.0.0.80:80 check 1systemctl enable --now haproxy 2systemctl restart haproxy ","link":"https://KalebHawkins.github.io/KryoLogs/tutorials/linux/redhat/haproxycluster/","section":"tutorials","title":"HAProxy \u0026 Keepalived"},{"body":" Installation Steps Addition Steps Installation Steps Remove older versions of Docker if installed.\n1sudo apt remove docker docker-engine docker.io containerd runc Install the Docker repository.\n1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 2sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; Install Docker CE.\n1sudo apt update -y 2sudo apt install docker-ce docker-ce-cli containerd.io -y Check the service status.\n1sudo systemctl status docker Test Installation.\n1sudo docker run hello-world Addition Steps Add user to docker group.\n1sudo usermod -aG docker $USER Log out and log back in so that your group membership is re-evaluated.\nIf testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.\nOn a desktop Linux environment such as X Windows, log out of your session completely and then log back in.\n","link":"https://KalebHawkins.github.io/KryoLogs/tutorials/linux/ubuntu/install-docker-ce/","section":"tutorials","title":"Install Docker CE (Ubuntu 20.04)"},{"body":"Welcome to KryoLogs. This is a place of random tutorials, notes, and whatever else.\n","link":"https://KalebHawkins.github.io/KryoLogs/","section":"","title":"KryoLogs"},{"body":" Overview Installation Uninstallation Customize Cluster Minikube Add-Ons Set Minikube $HOME Preferenced Setup Overview Minikube is local Kubernetes, focusing on making it easy to learn and develop for Kubernetes. All you need is Docker (or similarly compatible) container or a Virtual Machine environment, and Kubernetes is a single command away: minikube start.\nInstallation 1curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 2sudo install minikube-linux-amd64 /usr/local/bin/minikube Uninstallation 1sudo rm /usr/local/bin/minikube Customize Cluster Get configurable items using:\n1minikube config --help To set configuration properties:\n1minikube config set \u0026lt;property\u0026gt; \u0026lt;value\u0026gt; To get current configuration:\n1minikube config view Minikube Add-Ons List addons using:\n1minkube addons list Enable addons\n1minikube addon enable \u0026lt;addon\u0026gt; Set Minikube $HOME 1export MINIKUBE_HOME=/path/to/minikube/home Preferenced Setup 1export MINIKUBE_HOME=/path/to/minikube/home 2minikube config set cpus 8 3minikube config set memory 16384 4 5minikube start 6alias kubectl=\u0026#34;minikube kubectl --\u0026#34; ","link":"https://KalebHawkins.github.io/KryoLogs/tutorials/tools/minikube/","section":"tutorials","title":"Minikube"},{"body":" Prerequisites Create the Virtual Machine Prepare for Red Hat Installation Red Hat Installation Template Configuration Prerequisites Access to Red Hat's access portal to download the Red Hat ISO. An active Red Hat Enterprise Linux subscription. Create the Virtual Machine Sign into vCenter.\nRight-click the cluster you want to create the virtual machine on.\nSelect New Virtual Machine.\nSet the name and select a folder to place the template in.\nSelect the compute resource to place the template on.\nSelect the datastore to place the template on.\nSelect Compatibility.\nSelect the guest OS.\nGuest OS Family: Linux Guest OS Version: Red Hat Enterprise Linux 8 (64-bit) Customize the hardware.\nUse a 100Gb disk for the system OS disk. This will be what the partition scheme later on is based off of.\nMake sure the SCSI Controller is set to VMware Paravirtual.\nCreate the virtual machine.\nPrepare for Red Hat Installation Download the REd Hat 8 ISO from Red Hat's access portal.\nUpload the ISO to a datastore accessible to the host you put the template virtual machine on.\nRight-click on the template virtual machine.\nClick Edit Settings then connect the CD/DVD drive.\nDrop down the CD/DVD drive section\nSelect the Datastore ISO file on the first option.\nUse the BROWSE... button to select the ISO you uploaded.\nStart the virtual machine.\nRed Hat Installation For the Installation screen navigate through the prompts selecting the correct settings.\nUnder Date \u0026amp; Time select your timezone. (NTP will be configured later)\nUnder Software Selection select minimal install.\nUnder Network \u0026amp; Host Name go ahead and connect your network adapter by clicking Configure....\nSet the device name to ens192.\nSet the IPv4 Settings to the desired values. If this is going to be statically set then the Method should be set to Manual.\nSet the IPv6 Settings to Disabled.\nUnder Installation Destination in the Storage Configuration section select Custom the click Done.\nIn the menu presented click the + button to add a mount point. See below for what the layout should look like.\nMount Point Size File System Device Type /boot 1G xfs Standard Partition /home 20G xfs LVM /var 25G xfs LVM / 55G xfs LVM swap 4G xfs Swap Click Done once all is configured. Create a user if desired and set the root password from the menu options.\nTemplate Configuration Use the below to perform the template configuration.\n1# Register to Red Hat. 2subscription-manager register --username \u0026lt;username\u0026gt; --password \u0026lt;password\u0026gt; --autosubscribe 3# Update all system packages. 4dnf update -y 5# Get some essential tools. 6dnf install dnf-utils perl cloud-init python3-libselinux git bash-completion -y 7# Disable `cloud-init`. 8touch /etc/cloud/cloud-init.disabled 9# Seal the template. 10curl -L -o /opt/seal https://gist.githubusercontent.com/KalebHawkins/9a0877a6ba7bb0405ca32dc26b9a0004/raw/2455b03c49cab8c065335b14895905628d9313e9/Red%2520Hat%2520Template%2520Seal%2520Scripts 11chmod 700 /opt/seal 12/opt/seal ","link":"https://KalebHawkins.github.io/KryoLogs/tutorials/linux/redhat/vmware-template/","section":"tutorials","title":"Red Hat 8.5 VMWare Template"},{"body":" Overview Usage Overview This package implements a vSphere Web Services (SOAP) SDK endpoint intended for testing consumers of the API. While the mock framework is written in the Go language, it can be used by any language that can talk to the vSphere API.\nSee their github for more info.\nUsage To run vcsim using docker run the following:\n1docker run -p 8989:8989 vmware/vcsim:latest To test functionality of the container you can run the following command.\n1curl -sk https://user:pass@127.0.0.1:8989/about 2# Example out 3#{ 4# \u0026#34;Methods\u0026#34;: [ 5# \u0026#34;AcquireCloneTicket\u0026#34;, 6# \u0026#34;AcquireGenericServiceTicket\u0026#34;, 7# \u0026#34;AddAuthorizationRole\u0026#34;, 8# \u0026#34;AddCustomFieldDef\u0026#34;, 9# \u0026#34;AddDVPortgroup_Task\u0026#34;, 10# \u0026#34;AddHost_Task\u0026#34;, ","link":"https://KalebHawkins.github.io/KryoLogs/tutorials/tools/vcsim/","section":"tutorials","title":"Setup vcsim"},{"body":"","link":"https://KalebHawkins.github.io/KryoLogs/tags/","section":"tags","title":"Tags"},{"body":" Overview Installation Using PowerCLI Overview Vmware PowerCLI is a Powershell module used interact with vCenter amd vSphere APIs. This allows for simple automation of mundane, redundant tasks, like inventorying servers.\nInstallation To install PowerCLI open up a powershell window and run the following command.\n1Install-Module VMware.PowerCLI -Scope CurrentUser -AllowClobber Using PowerCLI Getting connected to your cluster can be performed with one command.\n1Connect-ViServer \u0026lt;vcenter.domain.com\u0026gt; -Credentials $(Get-Credentials) -Force Get a list of your clusters, hosts, and vms.\n1Get-Cluster 2Get-Host 3Get-VM There are many additional commands that can be used to automate entire infratructure deployments.\n","link":"https://KalebHawkins.github.io/KryoLogs/tutorials/tools/powercli/","section":"tutorials","title":"Vmware PowerCLI"}]